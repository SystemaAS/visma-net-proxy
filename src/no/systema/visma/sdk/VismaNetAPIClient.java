/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk;

import no.systema.visma.sdk.controllers.AccountController;
import no.systema.visma.sdk.controllers.AttachmentController;
import no.systema.visma.sdk.controllers.BaseController;
import no.systema.visma.sdk.controllers.BranchController;
import no.systema.visma.sdk.controllers.CarrierController;
import no.systema.visma.sdk.controllers.CashSaleController;
import no.systema.visma.sdk.controllers.ContactController;
import no.systema.visma.sdk.controllers.CreditNoteController;
import no.systema.visma.sdk.controllers.CurrencyController;
import no.systema.visma.sdk.controllers.CustomerController;
import no.systema.visma.sdk.controllers.CustomerDocumentController;
import no.systema.visma.sdk.controllers.CustomerInvoiceController;
import no.systema.visma.sdk.controllers.DimensionController;
import no.systema.visma.sdk.controllers.EmployeeController;
import no.systema.visma.sdk.controllers.FinancialPeriodController;
import no.systema.visma.sdk.controllers.GeneralLedgerBalanceController;
import no.systema.visma.sdk.controllers.GeneralLedgerTransactionsController;
import no.systema.visma.sdk.controllers.InventoryAdjustmentController;
import no.systema.visma.sdk.controllers.InventoryController;
import no.systema.visma.sdk.controllers.InventoryIssueController;
import no.systema.visma.sdk.controllers.InventoryReceiptController;
import no.systema.visma.sdk.controllers.InventorySummaryController;
import no.systema.visma.sdk.controllers.InventoryTransferController;
import no.systema.visma.sdk.controllers.JournalTransactionController;
import no.systema.visma.sdk.controllers.LedgerController;
import no.systema.visma.sdk.controllers.PackagingTypeController;
import no.systema.visma.sdk.controllers.PaymentController;
import no.systema.visma.sdk.controllers.PaymentMethodController;
import no.systema.visma.sdk.controllers.PurchaseOrderBasicController;
import no.systema.visma.sdk.controllers.PurchaseOrderController;
import no.systema.visma.sdk.controllers.PurchaseReceiptBasicController;
import no.systema.visma.sdk.controllers.PurchaseReceiptController;
import no.systema.visma.sdk.controllers.SalesOrderBasicController;
import no.systema.visma.sdk.controllers.SalesOrderController;
import no.systema.visma.sdk.controllers.SalesOrderTypeController;
import no.systema.visma.sdk.controllers.SecurityEndpointController;
import no.systema.visma.sdk.controllers.ShipmentController;
import no.systema.visma.sdk.controllers.StocktakeController;
import no.systema.visma.sdk.controllers.SubaccountController;
import no.systema.visma.sdk.controllers.SupplierController;
import no.systema.visma.sdk.controllers.SupplierDocumentController;
import no.systema.visma.sdk.controllers.SupplierInvoiceController;
import no.systema.visma.sdk.controllers.TokenResourceController;
import no.systema.visma.sdk.controllers.VatCategoryController;
import no.systema.visma.sdk.controllers.VatController;
import no.systema.visma.sdk.http.client.HttpClient;

public class VismaNetAPIClient {
    /**
     * Singleton access to GeneralLedgerTransactions controller
     * @return	Returns the GeneralLedgerTransactionsController instance 
     */
    public GeneralLedgerTransactionsController getGeneralLedgerTransactions() {
        return GeneralLedgerTransactionsController.getInstance();
    }

    /**
     * Singleton access to PurchaseReceipt controller
     * @return	Returns the PurchaseReceiptController instance 
     */
    public PurchaseReceiptController getPurchaseReceipt() {
        return PurchaseReceiptController.getInstance();
    }

    /**
     * Singleton access to PurchaseReceiptBasic controller
     * @return	Returns the PurchaseReceiptBasicController instance 
     */
    public PurchaseReceiptBasicController getPurchaseReceiptBasic() {
        return PurchaseReceiptBasicController.getInstance();
    }

    /**
     * Singleton access to Account controller
     * @return	Returns the AccountController instance 
     */
    public AccountController getAccount() {
        return AccountController.getInstance();
    }

    /**
     * Singleton access to Attachment controller
     * @return	Returns the AttachmentController instance 
     */
    public AttachmentController getAttachment() {
        return AttachmentController.getInstance();
    }

    /**
     * Singleton access to Branch controller
     * @return	Returns the BranchController instance 
     */
    public BranchController getBranch() {
        return BranchController.getInstance();
    }

    /**
     * Singleton access to Carrier controller
     * @return	Returns the CarrierController instance 
     */
    public CarrierController getCarrier() {
        return CarrierController.getInstance();
    }

    /**
     * Singleton access to CashSale controller
     * @return	Returns the CashSaleController instance 
     */
    public CashSaleController getCashSale() {
        return CashSaleController.getInstance();
    }

    /**
     * Singleton access to Contact controller
     * @return	Returns the ContactController instance 
     */
    public ContactController getContact() {
        return ContactController.getInstance();
    }

    /**
     * Singleton access to CreditNote controller
     * @return	Returns the CreditNoteController instance 
     */
    public CreditNoteController getCreditNote() {
        return CreditNoteController.getInstance();
    }

    /**
     * Singleton access to Currency controller
     * @return	Returns the CurrencyController instance 
     */
    public CurrencyController getCurrency() {
        return CurrencyController.getInstance();
    }

    /**
     * Singleton access to Customer controller
     * @return	Returns the CustomerController instance 
     */
    public CustomerController getCustomer() {
        return CustomerController.getInstance();
    }

    /**
     * Singleton access to CustomerDocument controller
     * @return	Returns the CustomerDocumentController instance 
     */
    public CustomerDocumentController getCustomerDocument() {
        return CustomerDocumentController.getInstance();
    }

    /**
     * Singleton access to CustomerInvoice controller
     * @return	Returns the CustomerInvoiceController instance 
     */
    public CustomerInvoiceController getCustomerInvoice() {
        return CustomerInvoiceController.getInstance();
    }

    /**
     * Singleton access to Dimension controller
     * @return	Returns the DimensionController instance 
     */
    public DimensionController getDimension() {
        return DimensionController.getInstance();
    }

    /**
     * Singleton access to Employee controller
     * @return	Returns the EmployeeController instance 
     */
    public EmployeeController getEmployee() {
        return EmployeeController.getInstance();
    }

    /**
     * Singleton access to FinancialPeriod controller
     * @return	Returns the FinancialPeriodController instance 
     */
    public FinancialPeriodController getFinancialPeriod() {
        return FinancialPeriodController.getInstance();
    }

    /**
     * Singleton access to GeneralLedgerBalance controller
     * @return	Returns the GeneralLedgerBalanceController instance 
     */
    public GeneralLedgerBalanceController getGeneralLedgerBalance() {
        return GeneralLedgerBalanceController.getInstance();
    }

    /**
     * Singleton access to Inventory controller
     * @return	Returns the InventoryController instance 
     */
    public InventoryController getInventory() {
        return InventoryController.getInstance();
    }

    /**
     * Singleton access to InventoryReceipt controller
     * @return	Returns the InventoryReceiptController instance 
     */
    public InventoryReceiptController getInventoryReceipt() {
        return InventoryReceiptController.getInstance();
    }

    /**
     * Singleton access to InventoryTransfer controller
     * @return	Returns the InventoryTransferController instance 
     */
    public InventoryTransferController getInventoryTransfer() {
        return InventoryTransferController.getInstance();
    }

    /**
     * Singleton access to InventoryAdjustment controller
     * @return	Returns the InventoryAdjustmentController instance 
     */
    public InventoryAdjustmentController getInventoryAdjustment() {
        return InventoryAdjustmentController.getInstance();
    }

    /**
     * Singleton access to InventoryIssue controller
     * @return	Returns the InventoryIssueController instance 
     */
    public InventoryIssueController getInventoryIssue() {
        return InventoryIssueController.getInstance();
    }

    /**
     * Singleton access to InventorySummary controller
     * @return	Returns the InventorySummaryController instance 
     */
    public InventorySummaryController getInventorySummary() {
        return InventorySummaryController.getInstance();
    }

    /**
     * Singleton access to JournalTransaction controller
     * @return	Returns the JournalTransactionController instance 
     */
    public JournalTransactionController getJournalTransaction() {
        return JournalTransactionController.getInstance();
    }

    /**
     * Singleton access to Ledger controller
     * @return	Returns the LedgerController instance 
     */
    public LedgerController getLedger() {
        return LedgerController.getInstance();
    }

    /**
     * Singleton access to PackagingType controller
     * @return	Returns the PackagingTypeController instance 
     */
    public PackagingTypeController getPackagingType() {
        return PackagingTypeController.getInstance();
    }

    /**
     * Singleton access to Payment controller
     * @return	Returns the PaymentController instance 
     */
    public PaymentController getPayment() {
        return PaymentController.getInstance();
    }

    /**
     * Singleton access to PaymentMethod controller
     * @return	Returns the PaymentMethodController instance 
     */
    public PaymentMethodController getPaymentMethod() {
        return PaymentMethodController.getInstance();
    }

    /**
     * Singleton access to PurchaseOrder controller
     * @return	Returns the PurchaseOrderController instance 
     */
    public PurchaseOrderController getPurchaseOrder() {
        return PurchaseOrderController.getInstance();
    }

    /**
     * Singleton access to PurchaseOrderBasic controller
     * @return	Returns the PurchaseOrderBasicController instance 
     */
    public PurchaseOrderBasicController getPurchaseOrderBasic() {
        return PurchaseOrderBasicController.getInstance();
    }

    /**
     * Singleton access to SalesOrder controller
     * @return	Returns the SalesOrderController instance 
     */
    public SalesOrderController getSalesOrder() {
        return SalesOrderController.getInstance();
    }

    /**
     * Singleton access to SalesOrderBasic controller
     * @return	Returns the SalesOrderBasicController instance 
     */
    public SalesOrderBasicController getSalesOrderBasic() {
        return SalesOrderBasicController.getInstance();
    }

    /**
     * Singleton access to SalesOrderType controller
     * @return	Returns the SalesOrderTypeController instance 
     */
    public SalesOrderTypeController getSalesOrderType() {
        return SalesOrderTypeController.getInstance();
    }

    /**
     * Singleton access to Shipment controller
     * @return	Returns the ShipmentController instance 
     */
    public ShipmentController getShipment() {
        return ShipmentController.getInstance();
    }

    /**
     * Singleton access to Stocktake controller
     * @return	Returns the StocktakeController instance 
     */
    public StocktakeController getStocktake() {
        return StocktakeController.getInstance();
    }

    /**
     * Singleton access to Subaccount controller
     * @return	Returns the SubaccountController instance 
     */
    public SubaccountController getSubaccount() {
        return SubaccountController.getInstance();
    }

    /**
     * Singleton access to Supplier controller
     * @return	Returns the SupplierController instance 
     */
    public SupplierController getSupplier() {
        return SupplierController.getInstance();
    }

    /**
     * Singleton access to SupplierInvoice controller
     * @return	Returns the SupplierInvoiceController instance 
     */
    public SupplierInvoiceController getSupplierInvoice() {
        return SupplierInvoiceController.getInstance();
    }

    /**
     * Singleton access to SupplierDocument controller
     * @return	Returns the SupplierDocumentController instance 
     */
    public SupplierDocumentController getSupplierDocument() {
        return SupplierDocumentController.getInstance();
    }

    /**
     * Singleton access to Vat controller
     * @return	Returns the VatController instance 
     */
    public VatController getVat() {
        return VatController.getInstance();
    }

    /**
     * Singleton access to VatCategory controller
     * @return	Returns the VatCategoryController instance 
     */
    public VatCategoryController getVatCategory() {
        return VatCategoryController.getInstance();
    }

    /**
     * Singleton access to SecurityEndpoint controller
     * @return	Returns the SecurityEndpointController instance 
     */
    public SecurityEndpointController getSecurityEndpoint() {
        return SecurityEndpointController.getInstance();
    }

    /**
     * Singleton access to TokenResource controller
     * @return	Returns the TokenResourceController instance 
     */
    public TokenResourceController getTokenResource() {
        return TokenResourceController.getInstance();
    }

    /**
     * Get the shared http client currently being used for API calls
     * @return The http client instance currently being used
     */
    public HttpClient getSharedHttpClient() {
        return BaseController.getClientInstance();
    }
    
    /**
     * Set a shared http client to be used for API calls
     * @param httpClient The http client to use
     */
    public void setSharedHttpClient(HttpClient httpClient) {
        BaseController.setClientInstance(httpClient);
    }

//    /**
//     * Default constructor 
//     */     
//    public VismaNetAPIClient() {	
//	}

    /**
     * Client initialization constructor 
     */     
    public VismaNetAPIClient(String oAuthAccessToken) {
//        this();
        Configuration.oAuthAccessToken = oAuthAccessToken;
    }
}