/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.controllers;

import java.util.HashMap;
import java.util.Map;

import no.system.visma.sdk.exceptions.APIException;
import no.systema.visma.sdk.APIHelper;
import no.systema.visma.sdk.Configuration;
import no.systema.visma.sdk.controllers.syncwrapper.APICallBackCatcher;
import no.systema.visma.sdk.http.client.APICallBack;
import no.systema.visma.sdk.http.client.HttpContext;
import no.systema.visma.sdk.http.request.HttpRequest;
import no.systema.visma.sdk.http.response.HttpResponse;

public class TokenResourceController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static TokenResourceController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the TokenResourceController class 
     */
    public static TokenResourceController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new TokenResourceController();
            }
        }
        return instance;
    }

    /**
     * TODO: type endpoint description here
     * @param    password    Required parameter: Visma.net password
     * @param    username    Required parameter: Visma.net user email
     * @param    authorization    Optional parameter: HTTP Basic authentication, the preffered way to authenticate clients
     * @param    clientId    Optional parameter: Client identifier. Mandatory to be set when no other HTTP authentication was used. For instance, a client can also use Authorization header to pass HTTP Basic authentication details
     * @param    clientSecret    Optional parameter: Client secret. Mandatory to be set only when no other HTTP authentication was set.
     * @return    Returns the void response from the API call 
     */
    public void createToken(
                final String password,
                final String username,
                final String authorization,
                final String clientId,
                final String clientSecret
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        createTokenAsync(password, username, authorization, clientId, clientSecret, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    password    Required parameter: Visma.net password
     * @param    username    Required parameter: Visma.net user email
     * @param    authorization    Optional parameter: HTTP Basic authentication, the preffered way to authenticate clients
     * @param    clientId    Optional parameter: Client identifier. Mandatory to be set when no other HTTP authentication was used. For instance, a client can also use Authorization header to pass HTTP Basic authentication details
     * @param    clientSecret    Optional parameter: Client secret. Mandatory to be set only when no other HTTP authentication was set.
     * @return    Returns the void response from the API call 
     */
    public void createTokenAsync(
                final String password,
                final String username,
                final String authorization,
                final String clientId,
                final String clientSecret,
                final APICallBack<Object> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/security/api/v2/token");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5668477845204596405L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "Authorization", authorization );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 5715245003152442086L;
            {
                    put( "grant_type", "password" );
                    put( "password", password );
                    put( "username", username );
                    put( "client_id", clientId );
                    put( "client_secret", clientSecret );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 500)
                                throw new APIException("successful operation", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}