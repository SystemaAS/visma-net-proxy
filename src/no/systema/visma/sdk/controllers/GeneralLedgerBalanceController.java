/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.controllers;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;

import no.system.visma.sdk.exceptions.APIException;
import no.systema.visma.sdk.APIHelper;
import no.systema.visma.sdk.Configuration;
import no.systema.visma.sdk.controllers.syncwrapper.APICallBackCatcher;
import no.systema.visma.sdk.http.client.APICallBack;
import no.systema.visma.sdk.http.client.HttpContext;
import no.systema.visma.sdk.http.request.HttpRequest;
import no.systema.visma.sdk.http.response.HttpResponse;
import no.systema.visma.sdk.http.response.HttpStringResponse;
import no.systema.visma.sdk.models.BalanceTypeEnum;
import no.systema.visma.sdk.models.GeneralLedgerBalanceDto;

public class GeneralLedgerBalanceController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static GeneralLedgerBalanceController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the GeneralLedgerBalanceController class 
     */
    public static GeneralLedgerBalanceController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new GeneralLedgerBalanceController();
            }
        }
        return instance;
    }

    /**
     * TODO: type endpoint description here
     * @param    accountId    Optional parameter: Example: 
     * @param    balanceType    Optional parameter: Example: 
     * @param    greaterThanValue    Optional parameter: Example: 
     * @param    lastModifiedDateTime    Optional parameter: Example: 
     * @param    lastModifiedDateTimeCondition    Optional parameter: Example: 
     * @param    numberToRead    Optional parameter: Example: 
     * @param    orderBy    Optional parameter: Example: 
     * @param    periodId    Optional parameter: Example: 
     * @param    periodIdCondition    Optional parameter: Example: 
     * @param    skipRecords    Optional parameter: Example: 
     * @param    yearClosed    Optional parameter: Example: 
     * @return    Returns the List<GeneralLedgerBalanceDto> response from the API call 
     */
    public List<GeneralLedgerBalanceDto> getGeneralLedgerBalanceGetAll(
                final String accountId,
                final BalanceTypeEnum balanceType,
                final String greaterThanValue,
                final String lastModifiedDateTime,
                final String lastModifiedDateTimeCondition,
                final Integer numberToRead,
                final String orderBy,
                final String periodId,
                final String periodIdCondition,
                final Integer skipRecords,
                final Integer yearClosed
    ) throws Throwable {
        APICallBackCatcher<List<GeneralLedgerBalanceDto>> callback = new APICallBackCatcher<List<GeneralLedgerBalanceDto>>();
        getGeneralLedgerBalanceGetAllAsync(accountId, balanceType, greaterThanValue, lastModifiedDateTime, lastModifiedDateTimeCondition, numberToRead, orderBy, periodId, periodIdCondition, skipRecords, yearClosed, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    accountId    Optional parameter: Example: 
     * @param    balanceType    Optional parameter: Example: 
     * @param    greaterThanValue    Optional parameter: Example: 
     * @param    lastModifiedDateTime    Optional parameter: Example: 
     * @param    lastModifiedDateTimeCondition    Optional parameter: Example: 
     * @param    numberToRead    Optional parameter: Example: 
     * @param    orderBy    Optional parameter: Example: 
     * @param    periodId    Optional parameter: Example: 
     * @param    periodIdCondition    Optional parameter: Example: 
     * @param    skipRecords    Optional parameter: Example: 
     * @param    yearClosed    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getGeneralLedgerBalanceGetAllAsync(
                final String accountId,
                final BalanceTypeEnum balanceType,
                final String greaterThanValue,
                final String lastModifiedDateTime,
                final String lastModifiedDateTimeCondition,
                final Integer numberToRead,
                final String orderBy,
                final String periodId,
                final String periodIdCondition,
                final Integer skipRecords,
                final Integer yearClosed,
                final APICallBack<List<GeneralLedgerBalanceDto>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/controller/api/v1/generalLedgerBalance");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4874259057845026870L;
            {
                    put( "accountId", accountId );
                    put( "balanceType", (null != balanceType) ? balanceType.value() : null );
                    put( "greaterThanValue", greaterThanValue );
                    put( "lastModifiedDateTime", lastModifiedDateTime );
                    put( "lastModifiedDateTimeCondition", lastModifiedDateTimeCondition );
                    put( "numberToRead", numberToRead );
                    put( "orderBy", orderBy );
                    put( "periodId", periodId );
                    put( "periodIdCondition", periodIdCondition );
                    put( "skipRecords", skipRecords );
                    put( "yearClosed", yearClosed );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5729435262145462273L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<GeneralLedgerBalanceDto> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<GeneralLedgerBalanceDto>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}