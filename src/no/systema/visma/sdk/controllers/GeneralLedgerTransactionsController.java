/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.controllers;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;

import no.system.visma.sdk.exceptions.APIException;
import no.systema.visma.sdk.APIHelper;
import no.systema.visma.sdk.Configuration;
import no.systema.visma.sdk.controllers.syncwrapper.APICallBackCatcher;
import no.systema.visma.sdk.http.client.APICallBack;
import no.systema.visma.sdk.http.client.HttpContext;
import no.systema.visma.sdk.http.request.HttpRequest;
import no.systema.visma.sdk.http.response.HttpResponse;
import no.systema.visma.sdk.http.response.HttpStringResponse;
import no.systema.visma.sdk.models.GeneralLedgerTransactionDetailsDto;

public class GeneralLedgerTransactionsController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static GeneralLedgerTransactionsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the GeneralLedgerTransactionsController class 
     */
    public static GeneralLedgerTransactionsController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new GeneralLedgerTransactionsController();
            }
        }
        return instance;
    }

    /**
     * TODO: type endpoint description here
     * @param    account    Optional parameter: Mandatory
     * @param    branch    Optional parameter: Mandatory
     * @param    fromDate    Optional parameter: Example: 
     * @param    fromPeriod    Optional parameter: Mandatory
     * @param    includeUnposted    Optional parameter: Example: 
     * @param    includeUnreleased    Optional parameter: Example: 
     * @param    ledger    Optional parameter: Mandatory
     * @param    numberToRead    Optional parameter: Example: 
     * @param    skipRecords    Optional parameter: Example: 
     * @param    subaccountId    Optional parameter: Example: 
     * @param    toDate    Optional parameter: Example: 
     * @param    toPeriod    Optional parameter: Mandatory
     * @return    Returns the List<GeneralLedgerTransactionDetailsDto> response from the API call 
     */
    public List<GeneralLedgerTransactionDetailsDto> getGeneralLedgerTransactionsGetAll(
                final String account,
                final String branch,
                final String fromDate,
                final String fromPeriod,
                final Boolean includeUnposted,
                final Boolean includeUnreleased,
                final String ledger,
                final Integer numberToRead,
                final Integer skipRecords,
                final String subaccountId,
                final String toDate,
                final String toPeriod
    ) throws Throwable {
        APICallBackCatcher<List<GeneralLedgerTransactionDetailsDto>> callback = new APICallBackCatcher<List<GeneralLedgerTransactionDetailsDto>>();
        getGeneralLedgerTransactionsGetAllAsync(account, branch, fromDate, fromPeriod, includeUnposted, includeUnreleased, ledger, numberToRead, skipRecords, subaccountId, toDate, toPeriod, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    account    Optional parameter: Mandatory
     * @param    branch    Optional parameter: Mandatory
     * @param    fromDate    Optional parameter: Example: 
     * @param    fromPeriod    Optional parameter: Mandatory
     * @param    includeUnposted    Optional parameter: Example: 
     * @param    includeUnreleased    Optional parameter: Example: 
     * @param    ledger    Optional parameter: Mandatory
     * @param    numberToRead    Optional parameter: Example: 
     * @param    skipRecords    Optional parameter: Example: 
     * @param    subaccountId    Optional parameter: Example: 
     * @param    toDate    Optional parameter: Example: 
     * @param    toPeriod    Optional parameter: Mandatory
     * @return    Returns the void response from the API call 
     */
    public void getGeneralLedgerTransactionsGetAllAsync(
                final String account,
                final String branch,
                final String fromDate,
                final String fromPeriod,
                final Boolean includeUnposted,
                final Boolean includeUnreleased,
                final String ledger,
                final Integer numberToRead,
                final Integer skipRecords,
                final String subaccountId,
                final String toDate,
                final String toPeriod,
                final APICallBack<List<GeneralLedgerTransactionDetailsDto>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/controller/api/v1/GeneralLedgerTransactions");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5630142308559980562L;
            {
                    put( "account", account );
                    put( "branch", branch );
                    put( "fromDate", fromDate );
                    put( "fromPeriod", fromPeriod );
                    put( "includeUnposted", includeUnposted );
                    put( "includeUnreleased", includeUnreleased );
                    put( "ledger", ledger );
                    put( "numberToRead", numberToRead );
                    put( "skipRecords", skipRecords );
                    put( "subaccountId", subaccountId );
                    put( "toDate", toDate );
                    put( "toPeriod", toPeriod );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4638701775185863298L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<GeneralLedgerTransactionDetailsDto> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<GeneralLedgerTransactionDetailsDto>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}