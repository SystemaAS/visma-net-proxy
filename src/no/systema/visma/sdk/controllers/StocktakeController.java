/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.controllers;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import no.system.visma.sdk.exceptions.APIException;
import no.systema.visma.sdk.APIHelper;
import no.systema.visma.sdk.Configuration;
import no.systema.visma.sdk.controllers.syncwrapper.APICallBackCatcher;
import no.systema.visma.sdk.http.client.APICallBack;
import no.systema.visma.sdk.http.client.HttpContext;
import no.systema.visma.sdk.http.request.HttpRequest;
import no.systema.visma.sdk.http.response.HttpResponse;
import no.systema.visma.sdk.http.response.HttpStringResponse;
import no.systema.visma.sdk.models.Status314Enum;
import no.systema.visma.sdk.models.StocktakeDto;
import no.systema.visma.sdk.models.StocktakeUpdateDto;
import no.systema.visma.sdk.models.SummaryStatusEnum;

public class StocktakeController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static StocktakeController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the StocktakeController class 
     */
    public static StocktakeController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new StocktakeController();
            }
        }
        return instance;
    }

    /**
     * TODO: type endpoint description here
     * @param    endWithLine    Optional parameter: Example: 
     * @param    expirationDateTime    Optional parameter: Example: 
     * @param    expirationDateTimeCondition    Optional parameter: Example: 
     * @param    freezeDateTime    Optional parameter: Example: 
     * @param    freezeDateTimeCondition    Optional parameter: Example: 
     * @param    inventory    Optional parameter: Example: 
     * @param    lastModifiedDateTime    Optional parameter: Example: 
     * @param    lastModifiedDateTimeCondition    Optional parameter: Example: 
     * @param    location    Optional parameter: Example: 
     * @param    lotSerialNumber    Optional parameter: Example: 
     * @param    numberToRead    Optional parameter: Example: 
     * @param    skipRecords    Optional parameter: Example: 
     * @param    startWithLine    Optional parameter: Example: 
     * @param    status    Optional parameter: Example: 
     * @param    summaryStatus    Optional parameter: Example: 
     * @param    warehouse    Optional parameter: Example: 
     * @return    Returns the List<StocktakeDto> response from the API call 
     */
    public List<StocktakeDto> getStocktakeGetAllStocktakes(
                final Integer endWithLine,
                final String expirationDateTime,
                final String expirationDateTimeCondition,
                final String freezeDateTime,
                final String freezeDateTimeCondition,
                final String inventory,
                final String lastModifiedDateTime,
                final String lastModifiedDateTimeCondition,
                final String location,
                final String lotSerialNumber,
                final Integer numberToRead,
                final Integer skipRecords,
                final Integer startWithLine,
                final Status314Enum status,
                final SummaryStatusEnum summaryStatus,
                final String warehouse
    ) throws Throwable {
        APICallBackCatcher<List<StocktakeDto>> callback = new APICallBackCatcher<List<StocktakeDto>>();
        getStocktakeGetAllStocktakesAsync(endWithLine, expirationDateTime, expirationDateTimeCondition, freezeDateTime, freezeDateTimeCondition, inventory, lastModifiedDateTime, lastModifiedDateTimeCondition, location, lotSerialNumber, numberToRead, skipRecords, startWithLine, status, summaryStatus, warehouse, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    endWithLine    Optional parameter: Example: 
     * @param    expirationDateTime    Optional parameter: Example: 
     * @param    expirationDateTimeCondition    Optional parameter: Example: 
     * @param    freezeDateTime    Optional parameter: Example: 
     * @param    freezeDateTimeCondition    Optional parameter: Example: 
     * @param    inventory    Optional parameter: Example: 
     * @param    lastModifiedDateTime    Optional parameter: Example: 
     * @param    lastModifiedDateTimeCondition    Optional parameter: Example: 
     * @param    location    Optional parameter: Example: 
     * @param    lotSerialNumber    Optional parameter: Example: 
     * @param    numberToRead    Optional parameter: Example: 
     * @param    skipRecords    Optional parameter: Example: 
     * @param    startWithLine    Optional parameter: Example: 
     * @param    status    Optional parameter: Example: 
     * @param    summaryStatus    Optional parameter: Example: 
     * @param    warehouse    Optional parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getStocktakeGetAllStocktakesAsync(
                final Integer endWithLine,
                final String expirationDateTime,
                final String expirationDateTimeCondition,
                final String freezeDateTime,
                final String freezeDateTimeCondition,
                final String inventory,
                final String lastModifiedDateTime,
                final String lastModifiedDateTimeCondition,
                final String location,
                final String lotSerialNumber,
                final Integer numberToRead,
                final Integer skipRecords,
                final Integer startWithLine,
                final Status314Enum status,
                final SummaryStatusEnum summaryStatus,
                final String warehouse,
                final APICallBack<List<StocktakeDto>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/controller/api/v1/stocktake");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4955878619536435440L;
            {
                    put( "endWithLine", endWithLine );
                    put( "expirationDateTime", expirationDateTime );
                    put( "expirationDateTimeCondition", expirationDateTimeCondition );
                    put( "freezeDateTime", freezeDateTime );
                    put( "freezeDateTimeCondition", freezeDateTimeCondition );
                    put( "inventory", inventory );
                    put( "lastModifiedDateTime", lastModifiedDateTime );
                    put( "lastModifiedDateTimeCondition", lastModifiedDateTimeCondition );
                    put( "location", location );
                    put( "lotSerialNumber", lotSerialNumber );
                    put( "numberToRead", numberToRead );
                    put( "skipRecords", skipRecords );
                    put( "startWithLine", startWithLine );
                    put( "status", (null != status) ? status.value() : null );
                    put( "summaryStatus", (null != summaryStatus) ? summaryStatus.value() : null );
                    put( "warehouse", warehouse );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5115307639673453083L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<StocktakeDto> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<StocktakeDto>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    referenceNumber    Required parameter: Identifies the Stocktake
     * @return    Returns the StocktakeDto response from the API call 
     */
    public StocktakeDto getStocktakeGet(
                final String referenceNumber
    ) throws Throwable {
        APICallBackCatcher<StocktakeDto> callback = new APICallBackCatcher<StocktakeDto>();
        getStocktakeGetAsync(referenceNumber, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    referenceNumber    Required parameter: Identifies the Stocktake
     * @return    Returns the void response from the API call 
     */
    public void getStocktakeGetAsync(
                final String referenceNumber,
                final APICallBack<StocktakeDto> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/controller/api/v1/stocktake/{referenceNumber}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5246594972648430803L;
            {
                    put( "referenceNumber", referenceNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5631437417927131353L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            StocktakeDto _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<StocktakeDto>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    referenceNumber    Required parameter: Identifies the stocktake to update
     * @param    stocktake    Required parameter: The data to update for stocktake
     * @return    Returns the void response from the API call 
     */
    public void updateStocktakePut(
                final String referenceNumber,
                final StocktakeUpdateDto stocktake
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        updateStocktakePutAsync(referenceNumber, stocktake, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    referenceNumber    Required parameter: Identifies the stocktake to update
     * @param    stocktake    Required parameter: The data to update for stocktake
     * @return    Returns the void response from the API call 
     */
    public void updateStocktakePutAsync(
                final String referenceNumber,
                final StocktakeUpdateDto stocktake,
                final APICallBack<Object> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/controller/api/v1/stocktake/{referenceNumber}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5730028621746518629L;
            {
                    put( "referenceNumber", referenceNumber );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4885964554902421139L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(stocktake));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}