/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.*;

public class PurchaseOrderLineDtoBuilder {
    //the instance to build
    private PurchaseOrderLineDto purchaseOrderLineDto;

    /**
     * Default constructor to initialize the instance
     */
    public PurchaseOrderLineDtoBuilder() {
        purchaseOrderLineDto = new PurchaseOrderLineDto();
    }

    public PurchaseOrderLineDtoBuilder account(AccountNumberTypeDescriptionDto account) {
        purchaseOrderLineDto.setAccount(account);
        return this;
    }

    public PurchaseOrderLineDtoBuilder alternateId(String alternateId) {
        purchaseOrderLineDto.setAlternateId(alternateId);
        return this;
    }

    public PurchaseOrderLineDtoBuilder amount(Double amount) {
        purchaseOrderLineDto.setAmount(amount);
        return this;
    }

    public PurchaseOrderLineDtoBuilder branch(BranchNumberDto branch) {
        purchaseOrderLineDto.setBranch(branch);
        return this;
    }

    public PurchaseOrderLineDtoBuilder canceled(Boolean canceled) {
        purchaseOrderLineDto.setCanceled(canceled);
        return this;
    }

    public PurchaseOrderLineDtoBuilder completed(Boolean completed) {
        purchaseOrderLineDto.setCompleted(completed);
        return this;
    }

    public PurchaseOrderLineDtoBuilder completeOn(Double completeOn) {
        purchaseOrderLineDto.setCompleteOn(completeOn);
        return this;
    }

    public PurchaseOrderLineDtoBuilder description(String description) {
        purchaseOrderLineDto.setDescription(description);
        return this;
    }

    public PurchaseOrderLineDtoBuilder discountAmount(Double discountAmount) {
        purchaseOrderLineDto.setDiscountAmount(discountAmount);
        return this;
    }

    public PurchaseOrderLineDtoBuilder discountCode(DiscountCodeNumberDescriptionDto discountCode) {
        purchaseOrderLineDto.setDiscountCode(discountCode);
        return this;
    }

    public PurchaseOrderLineDtoBuilder discountPercent(Double discountPercent) {
        purchaseOrderLineDto.setDiscountPercent(discountPercent);
        return this;
    }

    public PurchaseOrderLineDtoBuilder extCost(Double extCost) {
        purchaseOrderLineDto.setExtCost(extCost);
        return this;
    }

    public PurchaseOrderLineDtoBuilder inventory(InventoryNumberDescriptionDto inventory) {
        purchaseOrderLineDto.setInventory(inventory);
        return this;
    }

    public PurchaseOrderLineDtoBuilder lineDescription(String lineDescription) {
        purchaseOrderLineDto.setLineDescription(lineDescription);
        return this;
    }

    public PurchaseOrderLineDtoBuilder lineNbr(Integer lineNbr) {
        purchaseOrderLineDto.setLineNbr(lineNbr);
        return this;
    }

    public PurchaseOrderLineDtoBuilder lineType(LineTypeEnum lineType) {
        purchaseOrderLineDto.setLineType(lineType);
        return this;
    }

    public PurchaseOrderLineDtoBuilder manualDiscount(Boolean manualDiscount) {
        purchaseOrderLineDto.setManualDiscount(manualDiscount);
        return this;
    }

    public PurchaseOrderLineDtoBuilder maxReceipt(Double maxReceipt) {
        purchaseOrderLineDto.setMaxReceipt(maxReceipt);
        return this;
    }

    public PurchaseOrderLineDtoBuilder minReceipt(Double minReceipt) {
        purchaseOrderLineDto.setMinReceipt(minReceipt);
        return this;
    }

    public PurchaseOrderLineDtoBuilder orderNumber(String orderNumber) {
        purchaseOrderLineDto.setOrderNumber(orderNumber);
        return this;
    }

    public PurchaseOrderLineDtoBuilder orderQty(Double orderQty) {
        purchaseOrderLineDto.setOrderQty(orderQty);
        return this;
    }

    public PurchaseOrderLineDtoBuilder orderType(OrderTypeEnum orderType) {
        purchaseOrderLineDto.setOrderType(orderType);
        return this;
    }

    public PurchaseOrderLineDtoBuilder project(ProjectDto project) {
        purchaseOrderLineDto.setProject(project);
        return this;
    }

    public PurchaseOrderLineDtoBuilder projectTask(ProjectTaskDto projectTask) {
        purchaseOrderLineDto.setProjectTask(projectTask);
        return this;
    }

    public PurchaseOrderLineDtoBuilder promised(Date promised) {
        purchaseOrderLineDto.setPromised(promised);
        return this;
    }

    public PurchaseOrderLineDtoBuilder qtyOnReceipts(Double qtyOnReceipts) {
        purchaseOrderLineDto.setQtyOnReceipts(qtyOnReceipts);
        return this;
    }

    public PurchaseOrderLineDtoBuilder receiptAction(ReceiptActionEnum receiptAction) {
        purchaseOrderLineDto.setReceiptAction(receiptAction);
        return this;
    }

    public PurchaseOrderLineDtoBuilder receivedAmt(Double receivedAmt) {
        purchaseOrderLineDto.setReceivedAmt(receivedAmt);
        return this;
    }

    public PurchaseOrderLineDtoBuilder requested(Date requested) {
        purchaseOrderLineDto.setRequested(requested);
        return this;
    }

    public PurchaseOrderLineDtoBuilder sub(SubAccountDto sub) {
        purchaseOrderLineDto.setSub(sub);
        return this;
    }

    public PurchaseOrderLineDtoBuilder taxCategory(TaxCategoryNumberDescriptionDto taxCategory) {
        purchaseOrderLineDto.setTaxCategory(taxCategory);
        return this;
    }

    public PurchaseOrderLineDtoBuilder unitCost(Double unitCost) {
        purchaseOrderLineDto.setUnitCost(unitCost);
        return this;
    }

    public PurchaseOrderLineDtoBuilder uom(String uom) {
        purchaseOrderLineDto.setUom(uom);
        return this;
    }

    public PurchaseOrderLineDtoBuilder warehouse(WarehouseIdDescriptionDto warehouse) {
        purchaseOrderLineDto.setWarehouse(warehouse);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public PurchaseOrderLineDto build() {
        return purchaseOrderLineDto;
    }
}