/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.*;

public class InventoryTransferDtoBuilder {
    //the instance to build
    private InventoryTransferDto inventoryTransferDto;

    /**
     * Default constructor to initialize the instance
     */
    public InventoryTransferDtoBuilder() {
        inventoryTransferDto = new InventoryTransferDto();
    }

    /**
     * The reference number of the batch generated for the receipt. Click the number to open the Journal Transactions (GL.30.10.00) form and view the details of the transactions.
     */
    public InventoryTransferDtoBuilder batchNumber(String batchNumber) {
        inventoryTransferDto.setBatchNumber(batchNumber);
        return this;
    }

    /**
     * The manually entered quantity of inventory items. Control Qty. is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. If the Control Qty. and Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.
     */
    public InventoryTransferDtoBuilder controlQuantity(Double controlQuantity) {
        inventoryTransferDto.setControlQuantity(controlQuantity);
        return this;
    }

    /**
     * The date when the receipt was created. All transactions included in this document will have this transaction date.
     */
    public InventoryTransferDtoBuilder date(Date date) {
        inventoryTransferDto.setDate(date);
        return this;
    }

    /**
     * A brief description of the inventory issue or its transactions.
     */
    public InventoryTransferDtoBuilder description(String description) {
        inventoryTransferDto.setDescription(description);
        return this;
    }

    /**
     * The external reference number of the inventory issue document (for example, the vendor’s reference code).
     */
    public InventoryTransferDtoBuilder externalReference(String externalReference) {
        inventoryTransferDto.setExternalReference(externalReference);
        return this;
    }

    /**
     * A check box that you select to give the receipt the On Hold status. Clear the check box to save the receipt with the Balanced status.
     */
    public InventoryTransferDtoBuilder hold(Boolean hold) {
        inventoryTransferDto.setHold(hold);
        return this;
    }

    /**
     * The date when the document was last modified.
     */
    public InventoryTransferDtoBuilder lastModifiedDateTime(Date lastModifiedDateTime) {
        inventoryTransferDto.setLastModifiedDateTime(lastModifiedDateTime);
        return this;
    }

    /**
     * The financial period to which the transactions recorded in the document should be posted.
     */
    public InventoryTransferDtoBuilder postPeriod(String postPeriod) {
        inventoryTransferDto.setPostPeriod(postPeriod);
        return this;
    }

    /**
     * The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the Inventory Preferences IN.10.10.00) form.
     */
    public InventoryTransferDtoBuilder referenceNumber(String referenceNumber) {
        inventoryTransferDto.setReferenceNumber(referenceNumber);
        return this;
    }

    /**
     * The current status of the receipt. The following options are available: 
     *             On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.
     *             Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.
     *             Released: The receipt/issue has been released and cannot be edited or deleted.
     */
    public InventoryTransferDtoBuilder status(Status161Enum status) {
        inventoryTransferDto.setStatus(status);
        return this;
    }

    /**
     * The total quantity of inventory items, which the system calculates automatically, for the document.
     */
    public InventoryTransferDtoBuilder totalQuantity(Double totalQuantity) {
        inventoryTransferDto.setTotalQuantity(totalQuantity);
        return this;
    }

    public InventoryTransferDtoBuilder toWarehouse(WarehouseIdDescriptionDto toWarehouse) {
        inventoryTransferDto.setToWarehouse(toWarehouse);
        return this;
    }

    /**
     * The inventory transfer lines
     */
    public InventoryTransferDtoBuilder transferLines(List<InventoryTransferLineDto> transferLines) {
        inventoryTransferDto.setTransferLines(transferLines);
        return this;
    }

    public InventoryTransferDtoBuilder warehouse(WarehouseIdDescriptionDto warehouse) {
        inventoryTransferDto.setWarehouse(warehouse);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public InventoryTransferDto build() {
        return inventoryTransferDto;
    }
}