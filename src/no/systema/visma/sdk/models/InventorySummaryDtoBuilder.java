/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.*;

public class InventorySummaryDtoBuilder {
    //the instance to build
    private InventorySummaryDto inventorySummaryDto;

    /**
     * Default constructor to initialize the instance
     */
    public InventorySummaryDtoBuilder() {
        inventorySummaryDto = new InventorySummaryDto();
    }

    public InventorySummaryDtoBuilder available(Double available) {
        inventorySummaryDto.setAvailable(available);
        return this;
    }

    public InventorySummaryDtoBuilder availableForShipment(Double availableForShipment) {
        inventorySummaryDto.setAvailableForShipment(availableForShipment);
        return this;
    }

    public InventorySummaryDtoBuilder baseUnit(String baseUnit) {
        inventorySummaryDto.setBaseUnit(baseUnit);
        return this;
    }

    public InventorySummaryDtoBuilder dropShipForSO(Double dropShipForSO) {
        inventorySummaryDto.setDropShipForSO(dropShipForSO);
        return this;
    }

    public InventorySummaryDtoBuilder dropShipForSOPrepared(Double dropShipForSOPrepared) {
        inventorySummaryDto.setDropShipForSOPrepared(dropShipForSOPrepared);
        return this;
    }

    public InventorySummaryDtoBuilder dropShipForSOReceipts(Double dropShipForSOReceipts) {
        inventorySummaryDto.setDropShipForSOReceipts(dropShipForSOReceipts);
        return this;
    }

    public InventorySummaryDtoBuilder estimatedTotalCost(Double estimatedTotalCost) {
        inventorySummaryDto.setEstimatedTotalCost(estimatedTotalCost);
        return this;
    }

    public InventorySummaryDtoBuilder estimatedUnitCost(Double estimatedUnitCost) {
        inventorySummaryDto.setEstimatedUnitCost(estimatedUnitCost);
        return this;
    }

    public InventorySummaryDtoBuilder expired(Double expired) {
        inventorySummaryDto.setExpired(expired);
        return this;
    }

    public InventorySummaryDtoBuilder inAssemblyDemand(Double inAssemblyDemand) {
        inventorySummaryDto.setInAssemblyDemand(inAssemblyDemand);
        return this;
    }

    public InventorySummaryDtoBuilder inAssemblySupply(Double inAssemblySupply) {
        inventorySummaryDto.setInAssemblySupply(inAssemblySupply);
        return this;
    }

    public InventorySummaryDtoBuilder inIssues(Double inIssues) {
        inventorySummaryDto.setInIssues(inIssues);
        return this;
    }

    public InventorySummaryDtoBuilder inReceipts(Double inReceipts) {
        inventorySummaryDto.setInReceipts(inReceipts);
        return this;
    }

    public InventorySummaryDtoBuilder inTransit(Double inTransit) {
        inventorySummaryDto.setInTransit(inTransit);
        return this;
    }

    public InventorySummaryDtoBuilder inventory(InventoryNumberDescriptionDto inventory) {
        inventorySummaryDto.setInventory(inventory);
        return this;
    }

    public InventorySummaryDtoBuilder location(LocationIdNameDto location) {
        inventorySummaryDto.setLocation(location);
        return this;
    }

    public InventorySummaryDtoBuilder notAvailable(Double notAvailable) {
        inventorySummaryDto.setNotAvailable(notAvailable);
        return this;
    }

    public InventorySummaryDtoBuilder onHand(Double onHand) {
        inventorySummaryDto.setOnHand(onHand);
        return this;
    }

    public InventorySummaryDtoBuilder poReceipts(Double poReceipts) {
        inventorySummaryDto.setPoReceipts(poReceipts);
        return this;
    }

    public InventorySummaryDtoBuilder purchaseForSO(Double purchaseForSO) {
        inventorySummaryDto.setPurchaseForSO(purchaseForSO);
        return this;
    }

    public InventorySummaryDtoBuilder purchaseForSOPrepared(Double purchaseForSOPrepared) {
        inventorySummaryDto.setPurchaseForSOPrepared(purchaseForSOPrepared);
        return this;
    }

    public InventorySummaryDtoBuilder purchaseForSOReceipts(Double purchaseForSOReceipts) {
        inventorySummaryDto.setPurchaseForSOReceipts(purchaseForSOReceipts);
        return this;
    }

    public InventorySummaryDtoBuilder purchaseOrders(Double purchaseOrders) {
        inventorySummaryDto.setPurchaseOrders(purchaseOrders);
        return this;
    }

    public InventorySummaryDtoBuilder purchasePrepared(Double purchasePrepared) {
        inventorySummaryDto.setPurchasePrepared(purchasePrepared);
        return this;
    }

    public InventorySummaryDtoBuilder soAllocated(Double soAllocated) {
        inventorySummaryDto.setSoAllocated(soAllocated);
        return this;
    }

    public InventorySummaryDtoBuilder soBackOrdered(Double soBackOrdered) {
        inventorySummaryDto.setSoBackOrdered(soBackOrdered);
        return this;
    }

    public InventorySummaryDtoBuilder soBooked(Double soBooked) {
        inventorySummaryDto.setSoBooked(soBooked);
        return this;
    }

    public InventorySummaryDtoBuilder soShipped(Double soShipped) {
        inventorySummaryDto.setSoShipped(soShipped);
        return this;
    }

    public InventorySummaryDtoBuilder soToDropShip(Double soToDropShip) {
        inventorySummaryDto.setSoToDropShip(soToDropShip);
        return this;
    }

    public InventorySummaryDtoBuilder soToPurchase(Double soToPurchase) {
        inventorySummaryDto.setSoToPurchase(soToPurchase);
        return this;
    }

    public InventorySummaryDtoBuilder warehouse(WarehouseIdDescriptionDto warehouse) {
        inventorySummaryDto.setWarehouse(warehouse);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public InventorySummaryDto build() {
        return inventorySummaryDto;
    }
}