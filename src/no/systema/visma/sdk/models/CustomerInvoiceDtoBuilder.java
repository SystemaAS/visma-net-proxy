/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.*;

public class CustomerInvoiceDtoBuilder {
    //the instance to build
    private CustomerInvoiceDto customerInvoiceDto;

    /**
     * Default constructor to initialize the instance
     */
    public CustomerInvoiceDtoBuilder() {
        customerInvoiceDto = new CustomerInvoiceDto();
    }

    public CustomerInvoiceDtoBuilder amount(Double amount) {
        customerInvoiceDto.setAmount(amount);
        return this;
    }

    public CustomerInvoiceDtoBuilder amountInCurrency(Double amountInCurrency) {
        customerInvoiceDto.setAmountInCurrency(amountInCurrency);
        return this;
    }

    public CustomerInvoiceDtoBuilder attachments(List<AttachmentDto> attachments) {
        customerInvoiceDto.setAttachments(attachments);
        return this;
    }

    public CustomerInvoiceDtoBuilder balance(Double balance) {
        customerInvoiceDto.setBalance(balance);
        return this;
    }

    public CustomerInvoiceDtoBuilder balanceInCurrency(Double balanceInCurrency) {
        customerInvoiceDto.setBalanceInCurrency(balanceInCurrency);
        return this;
    }

    public CustomerInvoiceDtoBuilder cashDiscount(Double cashDiscount) {
        customerInvoiceDto.setCashDiscount(cashDiscount);
        return this;
    }

    public CustomerInvoiceDtoBuilder cashDiscountDate(Date cashDiscountDate) {
        customerInvoiceDto.setCashDiscountDate(cashDiscountDate);
        return this;
    }

    public CustomerInvoiceDtoBuilder cashDiscountInCurrency(Double cashDiscountInCurrency) {
        customerInvoiceDto.setCashDiscountInCurrency(cashDiscountInCurrency);
        return this;
    }

    public CustomerInvoiceDtoBuilder createdDateTime(Date createdDateTime) {
        customerInvoiceDto.setCreatedDateTime(createdDateTime);
        return this;
    }

    public CustomerInvoiceDtoBuilder creditTerms(CreditTermsDto creditTerms) {
        customerInvoiceDto.setCreditTerms(creditTerms);
        return this;
    }

    public CustomerInvoiceDtoBuilder currencyId(String currencyId) {
        customerInvoiceDto.setCurrencyId(currencyId);
        return this;
    }

    public CustomerInvoiceDtoBuilder customer(CustomerNumberDto customer) {
        customerInvoiceDto.setCustomer(customer);
        return this;
    }

    public CustomerInvoiceDtoBuilder customerRefNumber(String customerRefNumber) {
        customerInvoiceDto.setCustomerRefNumber(customerRefNumber);
        return this;
    }

    public CustomerInvoiceDtoBuilder detailTotal(Double detailTotal) {
        customerInvoiceDto.setDetailTotal(detailTotal);
        return this;
    }

    public CustomerInvoiceDtoBuilder detailTotalInCurrency(Double detailTotalInCurrency) {
        customerInvoiceDto.setDetailTotalInCurrency(detailTotalInCurrency);
        return this;
    }

    public CustomerInvoiceDtoBuilder documentDate(Date documentDate) {
        customerInvoiceDto.setDocumentDate(documentDate);
        return this;
    }

    public CustomerInvoiceDtoBuilder documentDueDate(Date documentDueDate) {
        customerInvoiceDto.setDocumentDueDate(documentDueDate);
        return this;
    }

    public CustomerInvoiceDtoBuilder documentType(DocumentTypeEnum documentType) {
        customerInvoiceDto.setDocumentType(documentType);
        return this;
    }

    public CustomerInvoiceDtoBuilder externalReference(String externalReference) {
        customerInvoiceDto.setExternalReference(externalReference);
        return this;
    }

    public CustomerInvoiceDtoBuilder financialPeriod(String financialPeriod) {
        customerInvoiceDto.setFinancialPeriod(financialPeriod);
        return this;
    }

    public CustomerInvoiceDtoBuilder hold(Boolean hold) {
        customerInvoiceDto.setHold(hold);
        return this;
    }

    public CustomerInvoiceDtoBuilder invoiceLines(List<CustomerInvoiceLineDto> invoiceLines) {
        customerInvoiceDto.setInvoiceLines(invoiceLines);
        return this;
    }

    public CustomerInvoiceDtoBuilder invoiceText(String invoiceText) {
        customerInvoiceDto.setInvoiceText(invoiceText);
        return this;
    }

    public CustomerInvoiceDtoBuilder lastModifiedDateTime(Date lastModifiedDateTime) {
        customerInvoiceDto.setLastModifiedDateTime(lastModifiedDateTime);
        return this;
    }

    public CustomerInvoiceDtoBuilder location(LocationDto location) {
        customerInvoiceDto.setLocation(location);
        return this;
    }

    public CustomerInvoiceDtoBuilder note(String note) {
        customerInvoiceDto.setNote(note);
        return this;
    }

    public CustomerInvoiceDtoBuilder paymentMethod(PaymentMethodIdDescriptionDto paymentMethod) {
        customerInvoiceDto.setPaymentMethod(paymentMethod);
        return this;
    }

    public CustomerInvoiceDtoBuilder postPeriod(String postPeriod) {
        customerInvoiceDto.setPostPeriod(postPeriod);
        return this;
    }

    public CustomerInvoiceDtoBuilder referenceNumber(String referenceNumber) {
        customerInvoiceDto.setReferenceNumber(referenceNumber);
        return this;
    }

    public CustomerInvoiceDtoBuilder salesPersonDescr(String salesPersonDescr) {
        customerInvoiceDto.setSalesPersonDescr(salesPersonDescr);
        return this;
    }

    public CustomerInvoiceDtoBuilder salesPersonID(Integer salesPersonID) {
        customerInvoiceDto.setSalesPersonID(salesPersonID);
        return this;
    }

    public CustomerInvoiceDtoBuilder status(StatusEnum status) {
        customerInvoiceDto.setStatus(status);
        return this;
    }

    public CustomerInvoiceDtoBuilder vatExemptTotal(Double vatExemptTotal) {
        customerInvoiceDto.setVatExemptTotal(vatExemptTotal);
        return this;
    }

    public CustomerInvoiceDtoBuilder vatExemptTotalInCurrency(Double vatExemptTotalInCurrency) {
        customerInvoiceDto.setVatExemptTotalInCurrency(vatExemptTotalInCurrency);
        return this;
    }

    public CustomerInvoiceDtoBuilder vatTaxableTotal(Double vatTaxableTotal) {
        customerInvoiceDto.setVatTaxableTotal(vatTaxableTotal);
        return this;
    }

    public CustomerInvoiceDtoBuilder vatTaxableTotalInCurrency(Double vatTaxableTotalInCurrency) {
        customerInvoiceDto.setVatTaxableTotalInCurrency(vatTaxableTotalInCurrency);
        return this;
    }

    public CustomerInvoiceDtoBuilder vatTotal(Double vatTotal) {
        customerInvoiceDto.setVatTotal(vatTotal);
        return this;
    }

    public CustomerInvoiceDtoBuilder vatTotalInCurrency(Double vatTotalInCurrency) {
        customerInvoiceDto.setVatTotalInCurrency(vatTotalInCurrency);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public CustomerInvoiceDto build() {
        return customerInvoiceDto;
    }
}