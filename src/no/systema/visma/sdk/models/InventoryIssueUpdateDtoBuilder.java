/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.*;

public class InventoryIssueUpdateDtoBuilder {
    //the instance to build
    private InventoryIssueUpdateDto inventoryIssueUpdateDto;

    /**
     * Default constructor to initialize the instance
     */
    public InventoryIssueUpdateDtoBuilder() {
        inventoryIssueUpdateDto = new InventoryIssueUpdateDto();
    }

    /**
     * The manually entered summary amount for all specified inventory items. Control Amount is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. If the Control Amount and Total Amount values do not match, the system generates a warning message and the issue cannot be saved.
     */
    public InventoryIssueUpdateDtoBuilder controlAmount(DtoValueNullableDecimal controlAmount) {
        inventoryIssueUpdateDto.setControlAmount(controlAmount);
        return this;
    }

    /**
     * The manually entered quantity of inventory items. Control Qty. is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. If the Control Qty. and Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.
     */
    public InventoryIssueUpdateDtoBuilder controlQuantity(DtoValueNullableDecimal controlQuantity) {
        inventoryIssueUpdateDto.setControlQuantity(controlQuantity);
        return this;
    }

    /**
     * The date when the receipt was created. All transactions included in this document will have this transaction date.
     */
    public InventoryIssueUpdateDtoBuilder date(DtoValueNullableDateTime date) {
        inventoryIssueUpdateDto.setDate(date);
        return this;
    }

    /**
     * A brief description of the inventory issue or its transactions.
     */
    public InventoryIssueUpdateDtoBuilder description(DtoValueString description) {
        inventoryIssueUpdateDto.setDescription(description);
        return this;
    }

    /**
     * The external reference number of the inventory issue document (for example, the vendor’s reference code).
     */
    public InventoryIssueUpdateDtoBuilder externalReference(DtoValueString externalReference) {
        inventoryIssueUpdateDto.setExternalReference(externalReference);
        return this;
    }

    /**
     * A check box that you select to give the receipt the On Hold status. Clear the check box to save the receipt with the Balanced status.
     */
    public InventoryIssueUpdateDtoBuilder hold(DtoValueNullableBoolean hold) {
        inventoryIssueUpdateDto.setHold(hold);
        return this;
    }

    /**
     * The inventory issue lines
     */
    public InventoryIssueUpdateDtoBuilder issueLines(List<InventoryIssueLineUpdateDto> issueLines) {
        inventoryIssueUpdateDto.setIssueLines(issueLines);
        return this;
    }

    /**
     * The financial period to which the transactions recorded in the document should be posted.
     */
    public InventoryIssueUpdateDtoBuilder postPeriod(DtoValueString postPeriod) {
        inventoryIssueUpdateDto.setPostPeriod(postPeriod);
        return this;
    }

    /**
     * The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the Inventory Preferences IN.10.10.00) form.
     */
    public InventoryIssueUpdateDtoBuilder referenceNumber(DtoValueString referenceNumber) {
        inventoryIssueUpdateDto.setReferenceNumber(referenceNumber);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public InventoryIssueUpdateDto build() {
        return inventoryIssueUpdateDto;
    }
}