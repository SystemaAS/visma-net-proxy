/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

public enum DocumentTextEnum {
    CONSTRUCTION, //TODO: Write general description for this element
    SUPPLYVAT0, //TODO: Write general description for this element
    DENOTEEXPORTSALES, //TODO: Write general description for this element
    EUSALEEXEMPTFROMTAX, //TODO: Write general description for this element
    TRIANGULATION, //TODO: Write general description for this element
    TRANSPORTOUTSIDEEU, //TODO: Write general description for this element
    SPECIALTAXFREETRANSFER, //TODO: Write general description for this element
    MEDICALSERVICESALES, //TODO: Write general description for this element
    BUYERHASVATLIABILITY, //TODO: Write general description for this element
    SALESOFGOLD, //TODO: Write general description for this element
    GOODSSERVICESWITHPARTIALDEDUCTION, //TODO: Write general description for this element
    MARGINESCHEME, //TODO: Write general description for this element
    TRAVELAGENTSMARGINESCHEME, //TODO: Write general description for this element
    PARTIALLYNONDEDUCTIBLEINUSE, //TODO: Write general description for this element
    VAT0SALESOUTSIDECOMMUNITY, //TODO: Write general description for this element
    SELFBILLING, //TODO: Write general description for this element
    MARGINESCHEMEUSEDITEMS, //TODO: Write general description for this element
    MARGINESCHEMEWORKSOFART, //TODO: Write general description for this element
    MARGINESCHEMECOLLECTORSITEMS; //TODO: Write general description for this element

    private static TreeMap<String, DocumentTextEnum> valueMap = new TreeMap<String, DocumentTextEnum>();
    private String value;

    static {
        CONSTRUCTION.value = "Construction";
        SUPPLYVAT0.value = "SupplyVat0";
        DENOTEEXPORTSALES.value = "DenoteExportSales";
        EUSALEEXEMPTFROMTAX.value = "EUSaleExemptFromTax";
        TRIANGULATION.value = "Triangulation";
        TRANSPORTOUTSIDEEU.value = "TransportOutsideEU";
        SPECIALTAXFREETRANSFER.value = "SpecialTaxFreeTransfer";
        MEDICALSERVICESALES.value = "MedicalServiceSales";
        BUYERHASVATLIABILITY.value = "BuyerHasVATLiability";
        SALESOFGOLD.value = "SalesOfGold";
        GOODSSERVICESWITHPARTIALDEDUCTION.value = "GoodsServicesWithPartialDeduction";
        MARGINESCHEME.value = "MargineScheme";
        TRAVELAGENTSMARGINESCHEME.value = "TravelAgentsMargineScheme";
        PARTIALLYNONDEDUCTIBLEINUSE.value = "PartiallyNonDeductibleInUse";
        VAT0SALESOUTSIDECOMMUNITY.value = "Vat0SalesOutsideCommunity";
        SELFBILLING.value = "SelfBilling";
        MARGINESCHEMEUSEDITEMS.value = "MargineSchemeUsedItems";
        MARGINESCHEMEWORKSOFART.value = "MargineSchemeWorksOfArt";
        MARGINESCHEMECOLLECTORSITEMS.value = "MargineSchemeCollectorsItems";

        valueMap.put("Construction", CONSTRUCTION);
        valueMap.put("SupplyVat0", SUPPLYVAT0);
        valueMap.put("DenoteExportSales", DENOTEEXPORTSALES);
        valueMap.put("EUSaleExemptFromTax", EUSALEEXEMPTFROMTAX);
        valueMap.put("Triangulation", TRIANGULATION);
        valueMap.put("TransportOutsideEU", TRANSPORTOUTSIDEEU);
        valueMap.put("SpecialTaxFreeTransfer", SPECIALTAXFREETRANSFER);
        valueMap.put("MedicalServiceSales", MEDICALSERVICESALES);
        valueMap.put("BuyerHasVATLiability", BUYERHASVATLIABILITY);
        valueMap.put("SalesOfGold", SALESOFGOLD);
        valueMap.put("GoodsServicesWithPartialDeduction", GOODSSERVICESWITHPARTIALDEDUCTION);
        valueMap.put("MargineScheme", MARGINESCHEME);
        valueMap.put("TravelAgentsMargineScheme", TRAVELAGENTSMARGINESCHEME);
        valueMap.put("PartiallyNonDeductibleInUse", PARTIALLYNONDEDUCTIBLEINUSE);
        valueMap.put("Vat0SalesOutsideCommunity", VAT0SALESOUTSIDECOMMUNITY);
        valueMap.put("SelfBilling", SELFBILLING);
        valueMap.put("MargineSchemeUsedItems", MARGINESCHEMEUSEDITEMS);
        valueMap.put("MargineSchemeWorksOfArt", MARGINESCHEMEWORKSOFART);
        valueMap.put("MargineSchemeCollectorsItems", MARGINESCHEMECOLLECTORSITEMS);
    }

    /**
     * Returns the enum member associated with the given string value
     * @return The enum member against the given string value */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static DocumentTextEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member
     * @return The string value against enum member */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of DocumentTextEnum values to list of string values
     * @param toConvert The list of DocumentTextEnum values to convert
     * @return List of representative string values */
    public static List<String> toValue(List<DocumentTextEnum> toConvert) {
        if(toConvert == null)
            return null;
        List<String> convertedValues = new ArrayList<String>();
        for (DocumentTextEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 