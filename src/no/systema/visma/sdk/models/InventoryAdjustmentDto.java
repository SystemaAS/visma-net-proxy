/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class InventoryAdjustmentDto 
        implements java.io.Serializable {
    private static final long serialVersionUID = 4689421304554645735L;
    private List<InventoryAdjustmentLineDto> adjusmentLines;
    private String batchNumber;
    private Double controlCost;
    private Double controlQuantity;
    private Date date;
    private String description;
    private String externalReference;
    private Boolean hold;
    private Date lastModifiedDateTime;
    private String postPeriod;
    private String referenceNumber;
    private Status161Enum status;
    private Double totalCost;
    private Double totalQuantity;
    /** GETTER
     * The inventory adjusment lines
     */
    @JsonGetter("adjusmentLines")
    public List<InventoryAdjustmentLineDto> getAdjusmentLines ( ) { 
        return this.adjusmentLines;
    }
    
    /** SETTER
     * The inventory adjusment lines
     */
    @JsonSetter("adjusmentLines")
    public void setAdjusmentLines (List<InventoryAdjustmentLineDto> value) { 
        this.adjusmentLines = value;
    }
 
    /** GETTER
     * The reference number of the batch generated for the receipt. Click the number to open the Journal Transactions (GL.30.10.00) form and view the details of the transactions.
     */
    @JsonGetter("batchNumber")
    public String getBatchNumber ( ) { 
        return this.batchNumber;
    }
    
    /** SETTER
     * The reference number of the batch generated for the receipt. Click the number to open the Journal Transactions (GL.30.10.00) form and view the details of the transactions.
     */
    @JsonSetter("batchNumber")
    public void setBatchNumber (String value) { 
        this.batchNumber = value;
    }
 
    /** GETTER
     * The total cost of the inventory items to be received. Control Cost is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. The user enters this value manually to confirm the total cost as calculated automatically for the document. If the Control Cost and Total Cost values do not match, the system generates a warning message and the document cannot be saved.
     */
    @JsonGetter("controlCost")
    public Double getControlCost ( ) { 
        return this.controlCost;
    }
    
    /** SETTER
     * The total cost of the inventory items to be received. Control Cost is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. The user enters this value manually to confirm the total cost as calculated automatically for the document. If the Control Cost and Total Cost values do not match, the system generates a warning message and the document cannot be saved.
     */
    @JsonSetter("controlCost")
    public void setControlCost (Double value) { 
        this.controlCost = value;
    }
 
    /** GETTER
     * The manually entered quantity of inventory items. Control Qty. is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. If the Control Qty. and Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.
     */
    @JsonGetter("controlQuantity")
    public Double getControlQuantity ( ) { 
        return this.controlQuantity;
    }
    
    /** SETTER
     * The manually entered quantity of inventory items. Control Qty. is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. If the Control Qty. and Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.
     */
    @JsonSetter("controlQuantity")
    public void setControlQuantity (Double value) { 
        this.controlQuantity = value;
    }
 
    /** GETTER
     * The date when the receipt was created. All transactions included in this document will have this transaction date.
     */
    @JsonGetter("date")
    public Date getDate ( ) { 
        return this.date;
    }
    
    /** SETTER
     * The date when the receipt was created. All transactions included in this document will have this transaction date.
     */
    @JsonSetter("date")
    public void setDate (Date value) { 
        this.date = value;
    }
 
    /** GETTER
     * A brief description of the inventory issue or its transactions.
     */
    @JsonGetter("description")
    public String getDescription ( ) { 
        return this.description;
    }
    
    /** SETTER
     * A brief description of the inventory issue or its transactions.
     */
    @JsonSetter("description")
    public void setDescription (String value) { 
        this.description = value;
    }
 
    /** GETTER
     * The external reference number of the inventory issue document (for example, the vendor’s reference code).
     */
    @JsonGetter("externalReference")
    public String getExternalReference ( ) { 
        return this.externalReference;
    }
    
    /** SETTER
     * The external reference number of the inventory issue document (for example, the vendor’s reference code).
     */
    @JsonSetter("externalReference")
    public void setExternalReference (String value) { 
        this.externalReference = value;
    }
 
    /** GETTER
     * A check box that you select to give the receipt the On Hold status. Clear the check box to save the receipt with the Balanced status.
     */
    @JsonGetter("hold")
    public Boolean getHold ( ) { 
        return this.hold;
    }
    
    /** SETTER
     * A check box that you select to give the receipt the On Hold status. Clear the check box to save the receipt with the Balanced status.
     */
    @JsonSetter("hold")
    public void setHold (Boolean value) { 
        this.hold = value;
    }
 
    /** GETTER
     * The date when the document was last modified.
     */
    @JsonGetter("lastModifiedDateTime")
    public Date getLastModifiedDateTime ( ) { 
        return this.lastModifiedDateTime;
    }
    
    /** SETTER
     * The date when the document was last modified.
     */
    @JsonSetter("lastModifiedDateTime")
    public void setLastModifiedDateTime (Date value) { 
        this.lastModifiedDateTime = value;
    }
 
    /** GETTER
     * The financial period to which the transactions recorded in the document should be posted.
     */
    @JsonGetter("postPeriod")
    public String getPostPeriod ( ) { 
        return this.postPeriod;
    }
    
    /** SETTER
     * The financial period to which the transactions recorded in the document should be posted.
     */
    @JsonSetter("postPeriod")
    public void setPostPeriod (String value) { 
        this.postPeriod = value;
    }
 
    /** GETTER
     * The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the Inventory Preferences IN.10.10.00) form.
     */
    @JsonGetter("referenceNumber")
    public String getReferenceNumber ( ) { 
        return this.referenceNumber;
    }
    
    /** SETTER
     * The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the Inventory Preferences IN.10.10.00) form.
     */
    @JsonSetter("referenceNumber")
    public void setReferenceNumber (String value) { 
        this.referenceNumber = value;
    }
 
    /** GETTER
     * The current status of the receipt. The following options are available: 
     *             On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.
     *             Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.
     *             Released: The receipt/issue has been released and cannot be edited or deleted.
     */
    @JsonGetter("status")
    public Status161Enum getStatus ( ) { 
        return this.status;
    }
    
    /** SETTER
     * The current status of the receipt. The following options are available: 
     *             On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.
     *             Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.
     *             Released: The receipt/issue has been released and cannot be edited or deleted.
     */
    @JsonSetter("status")
    public void setStatus (Status161Enum value) { 
        this.status = value;
    }
 
    /** GETTER
     * The total cost of the inventory items received. The system automatically calculates this value as a sum of all extended cost values of all received inventory items listed in the Transaction Details tab of this form.
     */
    @JsonGetter("totalCost")
    public Double getTotalCost ( ) { 
        return this.totalCost;
    }
    
    /** SETTER
     * The total cost of the inventory items received. The system automatically calculates this value as a sum of all extended cost values of all received inventory items listed in the Transaction Details tab of this form.
     */
    @JsonSetter("totalCost")
    public void setTotalCost (Double value) { 
        this.totalCost = value;
    }
 
    /** GETTER
     * The total quantity of inventory items, which the system calculates automatically, for the document.
     */
    @JsonGetter("totalQuantity")
    public Double getTotalQuantity ( ) { 
        return this.totalQuantity;
    }
    
    /** SETTER
     * The total quantity of inventory items, which the system calculates automatically, for the document.
     */
    @JsonSetter("totalQuantity")
    public void setTotalQuantity (Double value) { 
        this.totalQuantity = value;
    }
 
}
 