/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.*;

public class SalesOrderLineDtoBuilder {
    //the instance to build
    private SalesOrderLineDto salesOrderLineDto;

    /**
     * Default constructor to initialize the instance
     */
    public SalesOrderLineDtoBuilder() {
        salesOrderLineDto = new SalesOrderLineDto();
    }

    public SalesOrderLineDtoBuilder alternateID(String alternateID) {
        salesOrderLineDto.setAlternateID(alternateID);
        return this;
    }

    public SalesOrderLineDtoBuilder branch(Integer branch) {
        salesOrderLineDto.setBranch(branch);
        return this;
    }

    public SalesOrderLineDtoBuilder commissionable(Boolean commissionable) {
        salesOrderLineDto.setCommissionable(commissionable);
        return this;
    }

    public SalesOrderLineDtoBuilder completed(Boolean completed) {
        salesOrderLineDto.setCompleted(completed);
        return this;
    }

    public SalesOrderLineDtoBuilder discountAmount(Double discountAmount) {
        salesOrderLineDto.setDiscountAmount(discountAmount);
        return this;
    }

    public SalesOrderLineDtoBuilder discountCode(String discountCode) {
        salesOrderLineDto.setDiscountCode(discountCode);
        return this;
    }

    public SalesOrderLineDtoBuilder discountPercent(Double discountPercent) {
        salesOrderLineDto.setDiscountPercent(discountPercent);
        return this;
    }

    public SalesOrderLineDtoBuilder discUnitPrice(Double discUnitPrice) {
        salesOrderLineDto.setDiscUnitPrice(discUnitPrice);
        return this;
    }

    public SalesOrderLineDtoBuilder expirationDate(Date expirationDate) {
        salesOrderLineDto.setExpirationDate(expirationDate);
        return this;
    }

    public SalesOrderLineDtoBuilder extPrice(Double extPrice) {
        salesOrderLineDto.setExtPrice(extPrice);
        return this;
    }

    public SalesOrderLineDtoBuilder freeItem(Boolean freeItem) {
        salesOrderLineDto.setFreeItem(freeItem);
        return this;
    }

    public SalesOrderLineDtoBuilder inventory(InventoryNumberDescriptionDto inventory) {
        salesOrderLineDto.setInventory(inventory);
        return this;
    }

    public SalesOrderLineDtoBuilder invoiceNbr(String invoiceNbr) {
        salesOrderLineDto.setInvoiceNbr(invoiceNbr);
        return this;
    }

    public SalesOrderLineDtoBuilder lineDescription(String lineDescription) {
        salesOrderLineDto.setLineDescription(lineDescription);
        return this;
    }

    public SalesOrderLineDtoBuilder lineNbr(Integer lineNbr) {
        salesOrderLineDto.setLineNbr(lineNbr);
        return this;
    }

    public SalesOrderLineDtoBuilder lotSerialNbr(String lotSerialNbr) {
        salesOrderLineDto.setLotSerialNbr(lotSerialNbr);
        return this;
    }

    public SalesOrderLineDtoBuilder manualDiscount(Boolean manualDiscount) {
        salesOrderLineDto.setManualDiscount(manualDiscount);
        return this;
    }

    public SalesOrderLineDtoBuilder markForPO(Boolean markForPO) {
        salesOrderLineDto.setMarkForPO(markForPO);
        return this;
    }

    public SalesOrderLineDtoBuilder openQty(Double openQty) {
        salesOrderLineDto.setOpenQty(openQty);
        return this;
    }

    public SalesOrderLineDtoBuilder operation(Operation80Enum operation) {
        salesOrderLineDto.setOperation(operation);
        return this;
    }

    public SalesOrderLineDtoBuilder overshipThreshold(Double overshipThreshold) {
        salesOrderLineDto.setOvershipThreshold(overshipThreshold);
        return this;
    }

    public SalesOrderLineDtoBuilder poSource(PoSourceEnum poSource) {
        salesOrderLineDto.setPoSource(poSource);
        return this;
    }

    public SalesOrderLineDtoBuilder projectTask(Integer projectTask) {
        salesOrderLineDto.setProjectTask(projectTask);
        return this;
    }

    public SalesOrderLineDtoBuilder qtyOnShipments(Double qtyOnShipments) {
        salesOrderLineDto.setQtyOnShipments(qtyOnShipments);
        return this;
    }

    public SalesOrderLineDtoBuilder quantity(Double quantity) {
        salesOrderLineDto.setQuantity(quantity);
        return this;
    }

    public SalesOrderLineDtoBuilder reasonCode(String reasonCode) {
        salesOrderLineDto.setReasonCode(reasonCode);
        return this;
    }

    public SalesOrderLineDtoBuilder requestedOn(Date requestedOn) {
        salesOrderLineDto.setRequestedOn(requestedOn);
        return this;
    }

    public SalesOrderLineDtoBuilder salesPerson(SalesPersonDto salesPerson) {
        salesOrderLineDto.setSalesPerson(salesPerson);
        return this;
    }

    public SalesOrderLineDtoBuilder shipComplete(ShipCompleteEnum shipComplete) {
        salesOrderLineDto.setShipComplete(shipComplete);
        return this;
    }

    public SalesOrderLineDtoBuilder shipOn(Date shipOn) {
        salesOrderLineDto.setShipOn(shipOn);
        return this;
    }

    public SalesOrderLineDtoBuilder taxCategory(String taxCategory) {
        salesOrderLineDto.setTaxCategory(taxCategory);
        return this;
    }

    public SalesOrderLineDtoBuilder unbilledAmount(Double unbilledAmount) {
        salesOrderLineDto.setUnbilledAmount(unbilledAmount);
        return this;
    }

    public SalesOrderLineDtoBuilder undershipThreshold(Double undershipThreshold) {
        salesOrderLineDto.setUndershipThreshold(undershipThreshold);
        return this;
    }

    public SalesOrderLineDtoBuilder unitPrice(Double unitPrice) {
        salesOrderLineDto.setUnitPrice(unitPrice);
        return this;
    }

    public SalesOrderLineDtoBuilder uom(String uom) {
        salesOrderLineDto.setUom(uom);
        return this;
    }

    public SalesOrderLineDtoBuilder warehouse(WarehouseIdDescriptionDto warehouse) {
        salesOrderLineDto.setWarehouse(warehouse);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public SalesOrderLineDto build() {
        return salesOrderLineDto;
    }
}