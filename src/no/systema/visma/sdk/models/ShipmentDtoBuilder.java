/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.*;

public class ShipmentDtoBuilder {
    //the instance to build
    private ShipmentDto shipmentDto;

    /**
     * Default constructor to initialize the instance
     */
    public ShipmentDtoBuilder() {
        shipmentDto = new ShipmentDto();
    }

    public ShipmentDtoBuilder container(Boolean container) {
        shipmentDto.setContainer(container);
        return this;
    }

    public ShipmentDtoBuilder controlQuantity(Double controlQuantity) {
        shipmentDto.setControlQuantity(controlQuantity);
        return this;
    }

    public ShipmentDtoBuilder currencyId(String currencyId) {
        shipmentDto.setCurrencyId(currencyId);
        return this;
    }

    public ShipmentDtoBuilder customer(CustomerDescriptionDto customer) {
        shipmentDto.setCustomer(customer);
        return this;
    }

    public ShipmentDtoBuilder deliveryAddress(ShipmentAddressDto deliveryAddress) {
        shipmentDto.setDeliveryAddress(deliveryAddress);
        return this;
    }

    public ShipmentDtoBuilder deliveryContact(ShipmentContactDto deliveryContact) {
        shipmentDto.setDeliveryContact(deliveryContact);
        return this;
    }

    public ShipmentDtoBuilder fobPoint(FOBPointDescriptionDto fobPoint) {
        shipmentDto.setFobPoint(fobPoint);
        return this;
    }

    public ShipmentDtoBuilder freightAmt(Double freightAmt) {
        shipmentDto.setFreightAmt(freightAmt);
        return this;
    }

    public ShipmentDtoBuilder freightCost(Double freightCost) {
        shipmentDto.setFreightCost(freightCost);
        return this;
    }

    public ShipmentDtoBuilder fromWarehouse(WarehouseDto fromWarehouse) {
        shipmentDto.setFromWarehouse(fromWarehouse);
        return this;
    }

    public ShipmentDtoBuilder hold(Boolean hold) {
        shipmentDto.setHold(hold);
        return this;
    }

    public ShipmentDtoBuilder insurance(Boolean insurance) {
        shipmentDto.setInsurance(insurance);
        return this;
    }

    public ShipmentDtoBuilder lastModifiedDateTime(Date lastModifiedDateTime) {
        shipmentDto.setLastModifiedDateTime(lastModifiedDateTime);
        return this;
    }

    public ShipmentDtoBuilder location(LocationDto location) {
        shipmentDto.setLocation(location);
        return this;
    }

    public ShipmentDtoBuilder modeOfTrasport(ModeOfTransportDto modeOfTrasport) {
        shipmentDto.setModeOfTrasport(modeOfTrasport);
        return this;
    }

    public ShipmentDtoBuilder operation(Operation80Enum operation) {
        shipmentDto.setOperation(operation);
        return this;
    }

    public ShipmentDtoBuilder owner(UserDescriptionDto owner) {
        shipmentDto.setOwner(owner);
        return this;
    }

    public ShipmentDtoBuilder packages(Double packages) {
        shipmentDto.setPackages(packages);
        return this;
    }

    public ShipmentDtoBuilder packagesWeight(Double packagesWeight) {
        shipmentDto.setPackagesWeight(packagesWeight);
        return this;
    }

    public ShipmentDtoBuilder residentialDelivery(Boolean residentialDelivery) {
        shipmentDto.setResidentialDelivery(residentialDelivery);
        return this;
    }

    public ShipmentDtoBuilder saturdayDelivery(Boolean saturdayDelivery) {
        shipmentDto.setSaturdayDelivery(saturdayDelivery);
        return this;
    }

    public ShipmentDtoBuilder shipmentDate(Date shipmentDate) {
        shipmentDto.setShipmentDate(shipmentDate);
        return this;
    }

    public ShipmentDtoBuilder shipmentDetailLines(List<ShipmentDetailLineDto> shipmentDetailLines) {
        shipmentDto.setShipmentDetailLines(shipmentDetailLines);
        return this;
    }

    public ShipmentDtoBuilder shipmentNumber(String shipmentNumber) {
        shipmentDto.setShipmentNumber(shipmentNumber);
        return this;
    }

    public ShipmentDtoBuilder shipmentOrderLines(List<ShipmentOrderLineDto> shipmentOrderLines) {
        shipmentDto.setShipmentOrderLines(shipmentOrderLines);
        return this;
    }

    public ShipmentDtoBuilder shipmentPackageLines(List<PackageDetailLineDto> shipmentPackageLines) {
        shipmentDto.setShipmentPackageLines(shipmentPackageLines);
        return this;
    }

    public ShipmentDtoBuilder shipmentType(ShipmentTypeEnum shipmentType) {
        shipmentDto.setShipmentType(shipmentType);
        return this;
    }

    public ShipmentDtoBuilder shippedQuantity(Double shippedQuantity) {
        shipmentDto.setShippedQuantity(shippedQuantity);
        return this;
    }

    public ShipmentDtoBuilder shippedVolume(Double shippedVolume) {
        shipmentDto.setShippedVolume(shippedVolume);
        return this;
    }

    public ShipmentDtoBuilder shippedWeight(Double shippedWeight) {
        shipmentDto.setShippedWeight(shippedWeight);
        return this;
    }

    public ShipmentDtoBuilder shippingTerms(ShippingTermsDescriptionDto shippingTerms) {
        shipmentDto.setShippingTerms(shippingTerms);
        return this;
    }

    public ShipmentDtoBuilder shippingZone(ShippingZoneDescriptionDto shippingZone) {
        shipmentDto.setShippingZone(shippingZone);
        return this;
    }

    public ShipmentDtoBuilder shipVia(CarrierDescriptionDto shipVia) {
        shipmentDto.setShipVia(shipVia);
        return this;
    }

    public ShipmentDtoBuilder status(Status289Enum status) {
        shipmentDto.setStatus(status);
        return this;
    }

    public ShipmentDtoBuilder toWarehouse(WarehouseDto toWarehouse) {
        shipmentDto.setToWarehouse(toWarehouse);
        return this;
    }

    public ShipmentDtoBuilder transactionType(SigmaIntrastatTransactionDescriptionDto transactionType) {
        shipmentDto.setTransactionType(transactionType);
        return this;
    }

    public ShipmentDtoBuilder useCustomerAccount(Boolean useCustomerAccount) {
        shipmentDto.setUseCustomerAccount(useCustomerAccount);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public ShipmentDto build() {
        return shipmentDto;
    }
}