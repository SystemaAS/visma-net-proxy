/*
 * VismaNetAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package no.systema.visma.sdk.models;

import java.util.*;

public class InventoryReceiptDtoBuilder {
    //the instance to build
    private InventoryReceiptDto inventoryReceiptDto;

    /**
     * Default constructor to initialize the instance
     */
    public InventoryReceiptDtoBuilder() {
        inventoryReceiptDto = new InventoryReceiptDto();
    }

    /**
     * The reference number of the batch generated for the receipt. Click the number to open the Journal Transactions (GL.30.10.00) form and view the details of the transactions.
     */
    public InventoryReceiptDtoBuilder batchNumber(String batchNumber) {
        inventoryReceiptDto.setBatchNumber(batchNumber);
        return this;
    }

    /**
     * The total cost of the inventory items to be received. Control Cost is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. The user enters this value manually to confirm the total cost as calculated automatically for the document. If the Control Cost and Total Cost values do not match, the system generates a warning message and the document cannot be saved.
     */
    public InventoryReceiptDtoBuilder controlCost(Double controlCost) {
        inventoryReceiptDto.setControlCost(controlCost);
        return this;
    }

    /**
     * The manually entered quantity of inventory items. Control Qty. is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. If the Control Qty. and Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.
     */
    public InventoryReceiptDtoBuilder controlQuantity(Double controlQuantity) {
        inventoryReceiptDto.setControlQuantity(controlQuantity);
        return this;
    }

    /**
     * The date when the receipt was created. All transactions included in this document will have this transaction date.
     */
    public InventoryReceiptDtoBuilder date(Date date) {
        inventoryReceiptDto.setDate(date);
        return this;
    }

    /**
     * A brief description of the inventory issue or its transactions.
     */
    public InventoryReceiptDtoBuilder description(String description) {
        inventoryReceiptDto.setDescription(description);
        return this;
    }

    /**
     * The external reference number of the inventory issue document (for example, the vendor’s reference code).
     */
    public InventoryReceiptDtoBuilder externalReference(String externalReference) {
        inventoryReceiptDto.setExternalReference(externalReference);
        return this;
    }

    /**
     * A check box that you select to give the receipt the On Hold status. Clear the check box to save the receipt with the Balanced status.
     */
    public InventoryReceiptDtoBuilder hold(Boolean hold) {
        inventoryReceiptDto.setHold(hold);
        return this;
    }

    /**
     * The date when the document was last modified.
     */
    public InventoryReceiptDtoBuilder lastModifiedDateTime(Date lastModifiedDateTime) {
        inventoryReceiptDto.setLastModifiedDateTime(lastModifiedDateTime);
        return this;
    }

    /**
     * The financial period to which the transactions recorded in the document should be posted.
     */
    public InventoryReceiptDtoBuilder postPeriod(String postPeriod) {
        inventoryReceiptDto.setPostPeriod(postPeriod);
        return this;
    }

    /**
     * The inventory receipt lines
     */
    public InventoryReceiptDtoBuilder receiptLines(List<InventoryReceiptLineDto> receiptLines) {
        inventoryReceiptDto.setReceiptLines(receiptLines);
        return this;
    }

    /**
     * The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the Inventory Preferences IN.10.10.00) form.
     */
    public InventoryReceiptDtoBuilder referenceNumber(String referenceNumber) {
        inventoryReceiptDto.setReferenceNumber(referenceNumber);
        return this;
    }

    /**
     * The current status of the receipt. The following options are available: 
     *             On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.
     *             Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.
     *             Released: The receipt/issue has been released and cannot be edited or deleted.
     */
    public InventoryReceiptDtoBuilder status(Status161Enum status) {
        inventoryReceiptDto.setStatus(status);
        return this;
    }

    /**
     * The total cost of the inventory items received. The system automatically calculates this value as a sum of all extended cost values of all received inventory items listed in the Transaction Details tab of this form.
     */
    public InventoryReceiptDtoBuilder totalCost(Double totalCost) {
        inventoryReceiptDto.setTotalCost(totalCost);
        return this;
    }

    /**
     * The total quantity of inventory items, which the system calculates automatically, for the document.
     */
    public InventoryReceiptDtoBuilder totalQuantity(Double totalQuantity) {
        inventoryReceiptDto.setTotalQuantity(totalQuantity);
        return this;
    }

    /**
     * The transfer number for the receipt operation. (Enter this number only if the two-step transfer operation is performed.)
     */
    public InventoryReceiptDtoBuilder transferNumber(String transferNumber) {
        inventoryReceiptDto.setTransferNumber(transferNumber);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public InventoryReceiptDto build() {
        return inventoryReceiptDto;
    }
}