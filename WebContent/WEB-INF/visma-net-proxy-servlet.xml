<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:tx="http://www.springframework.org/schema/tx"
xmlns:mvc="http://www.springframework.org/schema/mvc"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.3.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

	<context:component-scan base-package="no.systema.*"/>
	 
	<!-- This will allow Wiring with annotations. [It is not the default]  -->
	<context:annotation-config/>

	<!-- Enable the annotation configuration to simplify the use of transactions as shown next -->
<!--  
	<tx:annotation-driven transaction-manager="dataTransactionManager" />
-->	
	<!-- ResponseBody secures UTF-8 and other ByteArray issues. Used when returning JSON payloads. Otherwise no UTF-8 will be ensured -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/plain;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                <bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter"/>
            </list>
        </property>
    </bean>
	
	
	<!--//////////////////////////////////
        MVC resolver for static resources
      ///////////////////////////////////
   	-->
 	<!-- In order to reach all static resources like images, css, etc. you must use mvc:resources (which requires mvc:annotation-drive)
 		 Both REQUIRE hibernate jar files despite the fact no use of Hibernate is done in you application. 
 		 There are dependencies that demand this Validation Hibernate JAR is in you lib-path. Otherwise mvc:resources will cast an
 		 Exception at bootstrap (WAR)-->
	<mvc:resources mapping="/resources/**" location="WEB-INF/resources/" order="1"/> 
	
	<mvc:annotation-driven />
	
	<!-- application properties -->
	<bean id="placeholderConfigMM" class="no.systema.jservices.common.util.ApplicationPropertiesUtil">
    	<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    	<property name="locations">
    		<list>
        		<value>classpath:application.properties</value>
    		</list>
    	</property>
	</bean>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
	</bean>	

	<bean id="dataTransactionManager"
  		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
  		scope="singleton">
  		<property name="dataSource" ref="dataSource" />
	</bean> 

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
		<property name="isolationLevelName" value="ISOLATION_READ_UNCOMMITTED" />
		<property name="timeout" value="30" />
	</bean>
	
	
</beans>